name: "üèîÔ∏è Epic"
description: Create an epic for large initiatives that span multiple features
title: "[EPIC] "
labels: ["epic", "coderbot"]
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        ## Epic Definition
        Epics are large bodies of work that can be broken down into smaller tasks (stories, features, bugs).
        CoderBot will help coordinate and track progress across all related work.

  - type: textarea
    id: epic_vision
    attributes:
      label: Epic Vision & Goal
      description: High-level vision and business value of this epic
      placeholder: |
        Build a comprehensive user management system that allows:
        - Enterprise-grade authentication and authorization
        - Self-service user account management
        - Admin controls for user governance
        - Compliance with security standards (SOC2, GDPR)
        
        Business Value:
        - Reduce support tickets by 60% through self-service
        - Enable enterprise sales with SSO support
        - Improve security posture for compliance
    validations:
      required: true

  - type: textarea
    id: scope_definition
    attributes:
      label: Scope & Deliverables
      description: What's included in this epic?
      placeholder: |
        In Scope:
        - Multi-factor authentication (MFA)
        - Single Sign-On (SSO) with SAML/OAuth
        - Role-based access control (RBAC)
        - User profile management
        - Password policies and rotation
        - Audit logging
        - Admin dashboard
        
        Out of Scope:
        - Biometric authentication (future epic)
        - Advanced threat detection (separate security epic)
    validations:
      required: true

  - type: textarea
    id: feature_breakdown
    attributes:
      label: Feature Breakdown
      description: Break down the epic into major features/components
      placeholder: |
        ## üîê Authentication Module
        - [ ] JWT token management (#)
        - [ ] OAuth 2.0 integration (#)
        - [ ] SAML 2.0 for enterprise SSO (#)
        - [ ] MFA with TOTP/SMS (#)
        
        ## üë• User Management
        - [ ] User CRUD operations (#)
        - [ ] Profile management UI (#)
        - [ ] Password reset flow (#)
        - [ ] Email verification (#)
        
        ## üõ°Ô∏è Authorization & RBAC
        - [ ] Role definition system (#)
        - [ ] Permission management (#)
        - [ ] Resource-based access control (#)
        - [ ] API middleware for auth checks (#)
        
        ## üìä Admin Dashboard
        - [ ] User listing and search (#)
        - [ ] User activity monitoring (#)
        - [ ] Role assignment interface (#)
        - [ ] Audit log viewer (#)
        
        ## üìù Compliance & Security
        - [ ] GDPR data export/deletion (#)
        - [ ] Session management (#)
        - [ ] Security headers implementation (#)
        - [ ] Penetration testing (#)
    validations:
      required: true

  - type: textarea
    id: technical_architecture
    attributes:
      label: Technical Architecture
      description: High-level technical approach and design decisions
      placeholder: |
        Architecture Decisions:
        - Use JWT for stateless authentication
        - Redis for session storage and rate limiting
        - PostgreSQL for user data with encryption at rest
        - Separate auth service for microservice architecture
        
        Technology Stack:
        - Backend: Node.js with Express
        - Database: PostgreSQL with Prisma ORM
        - Cache: Redis
        - Frontend: React with TypeScript
        - Auth Libraries: Passport.js, node-jsonwebtoken
        
        API Design:
        - RESTful API following OpenAPI 3.0 spec
        - GraphQL for complex user queries
        - WebSocket for real-time session updates
    validations:
      required: false

  - type: textarea
    id: dependencies_risks
    attributes:
      label: Dependencies & Risks
      description: External dependencies and identified risks
      placeholder: |
        Dependencies:
        - Database migration must complete first (#123)
        - UI component library upgrade (#456)
        - Security audit vendor selection
        
        Risks:
        - Performance impact of encryption (Mitigation: Caching layer)
        - Third-party SSO provider downtime (Mitigation: Fallback auth)
        - GDPR compliance complexity (Mitigation: Legal review)
    validations:
      required: false

  - type: textarea
    id: success_criteria
    attributes:
      label: Success Criteria & Metrics
      description: How will we measure success?
      placeholder: |
        Functional Success:
        - All authentication methods working with 99.9% uptime
        - Support for 10,000+ concurrent users
        - Sub-200ms authentication response time
        
        Business Metrics:
        - 60% reduction in password-related support tickets
        - 3 enterprise customers onboarded with SSO
        - Zero security breaches
        - 100% GDPR compliance audit pass
        
        Technical Metrics:
        - 90% test coverage
        - Zero critical vulnerabilities in security scan
        - API response time p95 < 200ms
    validations:
      required: true

  - type: textarea
    id: milestone_phases
    attributes:
      label: Milestones & Phases
      description: Implementation phases and timeline
      placeholder: |
        ## Phase 1: Foundation (Week 1-2)
        - Basic authentication with JWT
        - User CRUD operations
        - Database schema setup
        
        ## Phase 2: Core Features (Week 3-4)
        - Password reset flow
        - Email verification
        - Basic RBAC implementation
        
        ## Phase 3: Enterprise Features (Week 5-6)
        - SSO integration (SAML/OAuth)
        - MFA implementation
        - Advanced role management
        
        ## Phase 4: Admin & Compliance (Week 7-8)
        - Admin dashboard
        - Audit logging
        - GDPR compliance features
        
        ## Phase 5: Testing & Hardening (Week 9-10)
        - Security testing
        - Performance optimization
        - Documentation completion
    validations:
      required: false

  - type: dropdown
    id: epic_priority
    attributes:
      label: Epic Priority
      description: Business priority of this epic
      options:
        - "üî¥ Critical - Business Blocker"
        - "üü† High - Strategic Initiative"
        - "üü° Medium - Important Enhancement"
        - "üü¢ Low - Future Improvement"
    validations:
      required: true

  - type: dropdown
    id: epic_size
    attributes:
      label: Epic Size Estimate
      description: Rough estimate of total effort
      options:
        - "S - 2-4 weeks"
        - "M - 1-2 months"
        - "L - 2-3 months"
        - "XL - 3-6 months"
        - "XXL - 6+ months"
    validations:
      required: false

  - type: checkboxes
    id: epic_components
    attributes:
      label: Epic Components
      description: Which components will this epic touch?
      options:
        - label: Frontend application
          required: false
        - label: Backend services
          required: false
        - label: Database changes
          required: false
        - label: Infrastructure/DevOps
          required: false
        - label: Third-party integrations
          required: false
        - label: Documentation
          required: false
        - label: Testing infrastructure
          required: false
        - label: Security components
          required: false

  - type: textarea
    id: coderbot_coordination
    attributes:
      label: CoderBot Coordination Instructions
      description: How should CoderBot manage this epic?
      placeholder: |
        @coderbot for this epic please:
        - Break down into sized tasks (max 2 days each)
        - Create individual issues for each component
        - Tag issues with epic number for tracking
        - Prioritize security-critical components first
        - Ensure each phase has tests before moving to next
        - Coordinate with the database-designer agent for schema
        - Use security-architect agent for auth implementation
        - Regular progress updates on the epic
    validations:
      required: false